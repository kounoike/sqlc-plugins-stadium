// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.crud.sql

package table

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, guid, name FROM user WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id uint32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Guid, &i.Name)
	return i, err
}

const getUserByGUID = `-- name: GetUserByGUID :one
SELECT id, guid, name FROM user WHERE guid = ?
`

func (q *Queries) GetUserByGUID(ctx context.Context, guid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByGUID, guid)
	var i User
	err := row.Scan(&i.ID, &i.Guid, &i.Name)
	return i, err
}

const insertUser = `-- name: InsertUser :exec

INSERT INTO user (
	 guid, name
) VALUES (
	 ?, ?
)
`

type InsertUserParams struct {
	Guid string `db:"guid"`
	Name string `db:"name"`
}

// Code generated by sqlc-crud. DO NOT EDIT.
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser, arg.Guid, arg.Name)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user SET
	 guid = ?, name = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Guid string `db:"guid"`
	Name string `db:"name"`
	ID   uint32 `db:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Guid, arg.Name, arg.ID)
	return err
}
