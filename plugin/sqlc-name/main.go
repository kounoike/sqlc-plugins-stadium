package main

import (
	"bytes"
	"context"
	"fmt"
	"strings"
	"text/template"

	"github.com/tabbed/sqlc-go/codegen"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

const goTmpl = `// Code generated by sqlc-name. DO NOT EDIT.
package {{.Package}}
{{ $table := .Table.Rel.Name }}

const {{.Table.Rel.Name | pascal}}Table string = "{{.Table.Rel.Name}}"

func {{.Table.Rel.Name | pascal}}Columns() []string {
	return []string { {{ range $i, $c := .Table.Columns }}{{if ne $i 0}},{{end}}"{{$c.Name}}"{{ end }} }
}

func {{.Table.Rel.Name | pascal}}FullColumnNames() []string {
	return []string { {{ range $i, $c := .Table.Columns }}{{if ne $i 0}},{{end}}"{{$table}}.{{$c.Name}}"{{ end }} }
}

`

func toSnakeCase(s string) string {
	return strings.ToLower(s)
}

func toCamelCase(s string) string {
	return toCamelInitCase(s, false)
}

func toPascalCase(s string) string {
	return toCamelInitCase(s, true)
}

func toCamelInitCase(name string, initUpper bool) string {
	out := ""
	caser := cases.Title(language.English)
	for i, p := range strings.Split(name, "_") {
		if !initUpper && i == 0 {
			out += p
			continue
		}
		if p == "id" {
			out += "ID"
		} else if p == "guid" {
			out += "GUID"
		} else {
			out += caser.String(p)
		}
	}
	return out
}

func main() {
	codegen.Run(generate)
}

func generate(_ context.Context, req *codegen.Request) (*codegen.Response, error) {
	funcMap := map[string]interface{}{
		"snake":  toSnakeCase,
		"pascal": toPascalCase,
		"camel":  toCamelCase,
	}

	tmpl := template.Must(template.New("name").Funcs(funcMap).Parse(goTmpl))

	res := codegen.CodeGenResponse{
		Files: []*codegen.File{},
	}

	pkg := req.Settings.Go.Package

	for _, schema := range req.Catalog.Schemas {
		if schema.Name == req.Catalog.DefaultSchema {
			for _, table := range schema.Tables {
				var b bytes.Buffer
				data := struct {
					Package string
					Table   *codegen.Table
				}{
					Package: pkg,
					Table:   table,
				}
				err := tmpl.Execute(&b, data)
				if err != nil {
					return nil, err
				}
				file := codegen.File{
					Name:     fmt.Sprintf("%s.name.go", table.Rel.Name),
					Contents: b.Bytes(),
				}
				res.Files = append(res.Files, &file)
			}
		}
	}

	return &res, nil
}
